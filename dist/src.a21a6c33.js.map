{"version":3,"sources":["index.js"],"names":["_regeneratorRuntime","e","t","r","Object","prototype","n","hasOwnProperty","o","defineProperty","value","i","Symbol","a","iterator","c","asyncIterator","u","toStringTag","define","enumerable","configurable","writable","wrap","Generator","create","Context","makeInvokeMethod","tryCatch","type","arg","call","h","l","f","s","y","GeneratorFunction","GeneratorFunctionPrototype","p","d","getPrototypeOf","v","values","g","defineIteratorMethods","forEach","_invoke","AsyncIterator","invoke","_typeof","resolve","__await","then","callInvokeWithMethodAndArg","Error","done","method","delegate","maybeInvokeDelegate","sent","_sent","dispatchException","abrupt","return","TypeError","resultName","next","nextLoc","pushTryEntry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","push","resetTryEntry","completion","reset","isNaN","length","displayName","isGeneratorFunction","constructor","name","mark","setPrototypeOf","__proto__","awrap","async","Promise","keys","reverse","pop","prev","charAt","slice","stop","rval","handle","complete","finish","catch","_catch","delegateYield","asyncGeneratorStep","_asyncToGenerator","arguments","apply","_next","_throw","_callee","_callee$","_context","console","log","window","onload","document","body","innerHTML"],"mappings":"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","file":"src.a21a6c33.js","sourceRoot":"..\\src","sourcesContent":["// import {\r\n//     Application,\r\n//     Assets,\r\n//     BlurFilter,\r\n//     Color,\r\n//     Container,\r\n//     FillGradient,\r\n//     Graphics,\r\n//     Sprite,\r\n//     Text,\r\n//     TextStyle,\r\n//     Texture,\r\n// } from 'pixi.js';\r\n\r\n// (async () =>\r\n// {\r\n//     // Create a new application\r\n//     const app = new Application();\r\n\r\n//     // Initialize the application\r\n//     await app.init({ background: '#1099bb', resizeTo: window });\r\n\r\n//     // Append the application canvas to the document body\r\n//     document.body.appendChild(app.canvas);\r\n\r\n//     // Load the textures\r\n//     await Assets.load([\r\n//         'https://pixijs.com/assets/eggHead.png',\r\n//         'https://pixijs.com/assets/flowerTop.png',\r\n//         'https://pixijs.com/assets/helmlok.png',\r\n//         'https://pixijs.com/assets/skully.png',\r\n//     ]);\r\n\r\n//     const REEL_WIDTH = 160;\r\n//     const SYMBOL_SIZE = 150;\r\n\r\n//     // Create different slot symbols\r\n//     const slotTextures = [\r\n//         Texture.from('https://pixijs.com/assets/eggHead.png'),\r\n//         Texture.from('https://pixijs.com/assets/flowerTop.png'),\r\n//         Texture.from('https://pixijs.com/assets/helmlok.png'),\r\n//         Texture.from('https://pixijs.com/assets/skully.png'),\r\n//     ];\r\n\r\n//     // Build the reels\r\n//     const reels = [];\r\n//     const reelContainer = new Container();\r\n\r\n//     for (let i = 0; i < 5; i++)\r\n//     {\r\n//         const rc = new Container();\r\n\r\n//         rc.x = i * REEL_WIDTH;\r\n//         reelContainer.addChild(rc);\r\n\r\n//         const reel = {\r\n//             container: rc,\r\n//             symbols: [],\r\n//             position: 0,\r\n//             previousPosition: 0,\r\n//             blur: new BlurFilter(),\r\n//         };\r\n\r\n//         reel.blur.blurX = 0;\r\n//         reel.blur.blurY = 0;\r\n//         rc.filters = [reel.blur];\r\n\r\n//         // Build the symbols\r\n//         for (let j = 0; j < 4; j++)\r\n//         {\r\n//             const symbol = new Sprite(slotTextures[Math.floor(Math.random() * slotTextures.length)]);\r\n//             // Scale the symbol to fit symbol area.\r\n\r\n//             symbol.y = j * SYMBOL_SIZE;\r\n//             symbol.scale.x = symbol.scale.y = Math.min(SYMBOL_SIZE / symbol.width, SYMBOL_SIZE / symbol.height);\r\n//             symbol.x = Math.round((SYMBOL_SIZE - symbol.width) / 2);\r\n//             reel.symbols.push(symbol);\r\n//             rc.addChild(symbol);\r\n//         }\r\n//         reels.push(reel);\r\n//     }\r\n//     app.stage.addChild(reelContainer);\r\n\r\n//     // Build top & bottom covers and position reelContainer\r\n//     const margin = (app.screen.height - SYMBOL_SIZE * 3) / 2;\r\n\r\n//     reelContainer.y = margin;\r\n//     reelContainer.x = Math.round(app.screen.width - REEL_WIDTH * 5);\r\n//     const top = new Graphics().rect(0, 0, app.screen.width, margin).fill({ color: 0x0 });\r\n//     const bottom = new Graphics().rect(0, SYMBOL_SIZE * 3 + margin, app.screen.width, margin).fill({ color: 0x0 });\r\n\r\n//     // Create gradient fill\r\n//     const fill = new FillGradient(0, 0, 0, 36 * 1.7);\r\n\r\n//     const colors = [0xffffff, 0x00ff99].map((color) => Color.shared.setValue(color).toNumber());\r\n\r\n//     colors.forEach((number, index) =>\r\n//     {\r\n//         const ratio = index / colors.length;\r\n\r\n//         fill.addColorStop(ratio, number);\r\n//     });\r\n\r\n//     // Add play text\r\n//     const style = new TextStyle({\r\n//         fontFamily: 'Arial',\r\n//         fontSize: 36,\r\n//         fontStyle: 'italic',\r\n//         fontWeight: 'bold',\r\n//         fill: { fill },\r\n//         stroke: { color: 0x4a1850, width: 5 },\r\n//         dropShadow: {\r\n//             color: 0x000000,\r\n//             angle: Math.PI / 6,\r\n//             blur: 4,\r\n//             distance: 6,\r\n//         },\r\n//         wordWrap: true,\r\n//         wordWrapWidth: 440,\r\n//     });\r\n\r\n//     const playText = new Text('Spin the wheels!', style);\r\n\r\n//     playText.x = Math.round((bottom.width - playText.width) / 2);\r\n//     playText.y = app.screen.height - margin + Math.round((margin - playText.height) / 2);\r\n//     bottom.addChild(playText);\r\n\r\n//     // Add header text\r\n//     const headerText = new Text('PIXI MONSTER SLOTS!', style);\r\n\r\n//     headerText.x = Math.round((top.width - headerText.width) / 2);\r\n//     headerText.y = Math.round((margin - headerText.height) / 2);\r\n//     top.addChild(headerText);\r\n\r\n//     app.stage.addChild(top);\r\n//     app.stage.addChild(bottom);\r\n\r\n//     // Set the interactivity.\r\n//     bottom.eventMode = 'static';\r\n//     bottom.cursor = 'pointer';\r\n//     bottom.addListener('pointerdown', () =>\r\n//     {\r\n//         startPlay();\r\n//     });\r\n\r\n//     let running = false;\r\n\r\n//     // Function to start playing.\r\n//     function startPlay()\r\n//     {\r\n//         if (running) return;\r\n//         running = true;\r\n\r\n//         for (let i = 0; i < reels.length; i++)\r\n//         {\r\n//             const r = reels[i];\r\n//             const extra = Math.floor(Math.random() * 3);\r\n//             const target = r.position + 10 + i * 5 + extra;\r\n//             const time = 2500 + i * 600 + extra * 600;\r\n\r\n//             tweenTo(r, 'position', target, time, backout(0.5), null, i === reels.length - 1 ? reelsComplete : null);\r\n//         }\r\n//     }\r\n\r\n//     // Reels done handler.\r\n//     function reelsComplete()\r\n//     {\r\n//         running = false;\r\n//     }\r\n\r\n//     // Listen for animate update.\r\n//     app.ticker.add(() =>\r\n//     {\r\n//         // Update the slots.\r\n//         for (let i = 0; i < reels.length; i++)\r\n//         {\r\n//             const r = reels[i];\r\n//             // Update blur filter y amount based on speed.\r\n//             // This would be better if calculated with time in mind also. Now blur depends on frame rate.\r\n\r\n//             r.blur.blurY = (r.position - r.previousPosition) * 8;\r\n//             r.previousPosition = r.position;\r\n\r\n//             // Update symbol positions on reel.\r\n//             for (let j = 0; j < r.symbols.length; j++)\r\n//             {\r\n//                 const s = r.symbols[j];\r\n//                 const prevy = s.y;\r\n\r\n//                 s.y = ((r.position + j) % r.symbols.length) * SYMBOL_SIZE - SYMBOL_SIZE;\r\n//                 if (s.y < 0 && prevy > SYMBOL_SIZE)\r\n//                 {\r\n//                     // Detect going over and swap a texture.\r\n//                     // This should in proper product be determined from some logical reel.\r\n//                     s.texture = slotTextures[Math.floor(Math.random() * slotTextures.length)];\r\n//                     s.scale.x = s.scale.y = Math.min(SYMBOL_SIZE / s.texture.width, SYMBOL_SIZE / s.texture.height);\r\n//                     s.x = Math.round((SYMBOL_SIZE - s.width) / 2);\r\n//                 }\r\n//             }\r\n//         }\r\n//     });\r\n\r\n//     // Very simple tweening utility function. This should be replaced with a proper tweening library in a real product.\r\n//     const tweening = [];\r\n\r\n//     function tweenTo(object, property, target, time, easing, onchange, oncomplete)\r\n//     {\r\n//         const tween = {\r\n//             object,\r\n//             property,\r\n//             propertyBeginValue: object[property],\r\n//             target,\r\n//             easing,\r\n//             time,\r\n//             change: onchange,\r\n//             complete: oncomplete,\r\n//             start: Date.now(),\r\n//         };\r\n\r\n//         tweening.push(tween);\r\n\r\n//         return tween;\r\n//     }\r\n//     // Listen for animate update.\r\n//     app.ticker.add(() =>\r\n//     {\r\n//         const now = Date.now();\r\n//         const remove = [];\r\n\r\n//         for (let i = 0; i < tweening.length; i++)\r\n//         {\r\n//             const t = tweening[i];\r\n//             const phase = Math.min(1, (now - t.start) / t.time);\r\n\r\n//             t.object[t.property] = lerp(t.propertyBeginValue, t.target, t.easing(phase));\r\n//             if (t.change) t.change(t);\r\n//             if (phase === 1)\r\n//             {\r\n//                 t.object[t.property] = t.target;\r\n//                 if (t.complete) t.complete(t);\r\n//                 remove.push(t);\r\n//             }\r\n//         }\r\n//         for (let i = 0; i < remove.length; i++)\r\n//         {\r\n//             tweening.splice(tweening.indexOf(remove[i]), 1);\r\n//         }\r\n//     });\r\n\r\n//     // Basic lerp funtion.\r\n//     function lerp(a1, a2, t)\r\n//     {\r\n//         return a1 * (1 - t) + a2 * t;\r\n//     }\r\n\r\n//     // Backout function from tweenjs.\r\n//     // https://github.com/CreateJS/TweenJS/blob/master/src/tweenjs/Ease.js\r\n//     function backout(amount)\r\n//     {\r\n//         return (t) => --t * t * ((amount + 1) * t + amount) + 1;\r\n//     }\r\n// })();\r\n\r\n(async() => {\r\n    console.log('test')\r\n\r\n    window.onload = () => {\r\n        document.body.innerHTML = \"<h1>Test</h1>\";\r\n    }\r\n})()"]}